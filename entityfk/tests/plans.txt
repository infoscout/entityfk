DJANGO PROVIDER TESTS
    to_ref class
        >>> from infoscout.apps.rdl.models import Receipt
        >>> from entityfk.providers import DjangoProvider
        >>> from entityfk.providers import DjangoModelProvider
        >>> a = DjangoModelProvider()
        >>> a.to_ref(Receipt())
        ('rdl.receipt', None)

    to_ref object
        >>> a.to_ref(Receipt(pk=1))
        ('rdl.receipt', 1)

    to_model
        >>> a.to_model('rdl.receipt' )
        <class 'infoscout.apps.rdl.models.Receipt'>

    to_ref with string
        should throw TypeNotSupported

    to_object  
        NOTE: requires mocking Receipt.objects.get
        >>> a.to_object(('rdl.receipt', 1))
        <Receipt: Receipt: 1>

entityfk.methods test
    entity_label
        >>> entityfk.entity_label(Receipt(pk=1))
        'rdl.receipt'

    entity_label
        >>> entityfk.entity_label("apple")
        ValueError: Cannot serialize object

    entity_ref
        >>> entityfk.entity_ref(Receipt(pk=1))
        ('rdl.receipt', 1)

    entity_ref
        >>> entityfk.entity_ref("kisnyul")
        ValueError: Cannot serialize object

    entity_model
        >>> entityfk.entity_model('rdl.receipt')
        <class 'infoscout.apps.rdl.models.Receipt'>

    entity_model
        >>> entityfk.entity_model('rdl.receipt2')
        ValueError: Label not supported

    entity_instance
        >>> entityfk.entity_instance("rdl.receipt", 1)
        <Receipt: Receipt: 1>

       ValueError: Cannot unserialize object

EntityForeignKey TESTS

    set/get
        In [1]: from infoscout.apps.survey.models import UserSurveyTag

        In [2]: from infoscout.apps.rdl.models import Receipt

        In [3]: a = Receipt(pk=1)

        In [4]: b = UserSurveyTag()

        In [5]: b.entity_object = a

        In [6]: b.entity
        Out[6]: 'rdl.receipt'

        In [7]: b.entity_id
        Out[7]: 1

    get
        VERSIONS: valid, invalid-id, invalid-label
        NOTE: no cache
        In [14]: b.entity_id
        Out[14]: 1

        In [15]: b.entity_id=-1
                 del b._entity_object_cache

        In [16]: b.entity_object

        In [17]:

